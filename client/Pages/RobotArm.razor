@page "/robot-arm"
@layout MainLayout
@inherits JonnychipzBlazorWebApp.Pages.RobotArmComponent
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@using Radzen
@using Radzen.Blazor
@inject Microsoft.Extensions.Localization.IStringLocalizer<RobotArm> L
<RadzenContent Container="main">
  <ChildContent>
    <RadzenHeading Size="H1" Text="Robot Arm">
    </RadzenHeading>
    <RadzenImage Path="assets/images/robotarm.JPEG" style="height: 277px; width: 393px">
    </RadzenImage>
  </ChildContent>
</RadzenContent>



<div class="form-group row">
    <label>
        Servo 1 (@servo1):
    </label>
    <MatSlider @bind-Value="@servo1" Immediate="true" Step="1" EnableStep="true" ValueMin="40" ValueMax="140" Markers="true" Pin="true" TValue="int" Discrete="true"></MatSlider>
</div>

<div class="form-group row">
    <label>
        Servo 2 (@servo2):
    </label>
    <MatSlider @bind-Value="@servo2" Immediate="true" Step="1" EnableStep="true" ValueMin="60" ValueMax="175" Markers="true" Pin="true" TValue="int" Discrete="true"></MatSlider>
</div>

<div class="form-group row">
    <label>
        Servo 3 (@servo3):
    </label>
    <MatSlider @bind-Value="@servo3" Immediate="true" Step="1" EnableStep="true" ValueMin="0" ValueMax="100" Markers="true" Pin="true" TValue="int" Discrete="true"></MatSlider>
</div>

<div class="form-group row">
    <label>
        Servo 4 (@servo4):
    </label>
    <MatSlider @bind-Value="@servo4" Immediate="true" Step="1" EnableStep="true" ValueMin="15" ValueMax="60" Markers="true" Pin="true" TValue="int" Discrete="true"></MatSlider>
</div>

@code {
    private int _servo1 = 50;
    private int _servo2 = 60;
    private int _servo3 = 0;
    private int _servo4 = 15;
    private HubConnection hubConnection;
    public int servo1
    {
        get => _servo1;
        set
        {
            _servo1 = value;
            this.StateHasChanged();
            hubConnection.SendAsync("SendMessage", "servo1", _servo1.ToString());
        }
    }
    public int servo2
    {
        get => _servo2;
        set
        {
            _servo2 = value;
            this.StateHasChanged();
            hubConnection.SendAsync("SendMessage", "servo2", _servo2.ToString());
        }
    }
    public int servo3
    {
        get => _servo3;
        set
        {
            _servo3 = value;
            this.StateHasChanged();
            hubConnection.SendAsync("SendMessage", "servo3", _servo3.ToString());
        }
    }
    public int servo4
    {
        get => _servo4;
        set
        {
            _servo4 = value;
            this.StateHasChanged();
            hubConnection.SendAsync("SendMessage", "servo4", _servo4.ToString());
        }
    }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        await hubConnection.StartAsync();
    }
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}